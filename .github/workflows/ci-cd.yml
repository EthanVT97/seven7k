name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  FRONTEND_DIR: 'frontend'
  BACKEND_DIR: 'backend'
  KUBERNETES_CONFIG_DIR: 'k8s'

jobs:
  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.FRONTEND_DIR }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Install Dependencies
        run: |
          npm install
          npm install -D @types/dompurify@3.0.5
          npm install -D @types/marked@5.0.2
          npm install dompurify@3.2.2
          npm install marked@11.2.0
          npm install -D @types/trusted-types@2.0.7

      - name: Type Check
        run: npm run type-check

      - name: Run Tests
        run: npm test -- --watchAll=false --ci --coverage

      - name: Build
        run: npm run build

      - name: Cache Build
        uses: actions/cache@v3
        with:
          path: |
            dist
            node_modules/.cache
          key: ${{ runner.os }}-frontend-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-frontend-build-

  backend:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.BACKEND_DIR }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.BACKEND_DIR }}/package-lock.json

      - name: Install Dependencies
        run: |
          npm install
          npm install typescript@5.3.2
          npm install -D ts-node@10.9.1
          npm install -D @types/node@20.10.3

      - name: Run Tests
        run: npm test

      - name: Build
        run: npm run build

      - name: Cache Build
        uses: actions/cache@v3
        with:
          path: |
            dist
            node_modules/.cache
          key: ${{ runner.os }}-backend-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-backend-build-

  deploy:
    name: Deploy to Production
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    env:
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      DIGITALOCEAN_CLUSTER_NAME: ${{ secrets.DIGITALOCEAN_CLUSTER_NAME }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Restore Frontend Build
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.FRONTEND_DIR }}/dist
          key: ${{ runner.os }}-frontend-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-frontend-build-

      - name: Restore Backend Build
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.BACKEND_DIR }}/dist
          key: ${{ runner.os }}-backend-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-backend-build-

      - name: Set Up doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ env.DIGITALOCEAN_TOKEN }}
      
      - name: Validate Kubernetes Config Files
        run: |
          if [ ! -d "${{ env.KUBERNETES_CONFIG_DIR }}" ] || [ -z "$(ls -A ${{ env.KUBERNETES_CONFIG_DIR }})" ]; then
            echo "Error: Kubernetes config directory is empty or missing"
            exit 1
          fi
          echo "Found Kubernetes configuration files:"
          ls -la ${{ env.KUBERNETES_CONFIG_DIR }}/

      - name: Save Kubernetes Config
        run: doctl kubernetes cluster kubeconfig save "${{ env.DIGITALOCEAN_CLUSTER_NAME }}"

      - name: Verify Kubernetes Manifests
        run: |
          echo "Validating Kubernetes manifests..."
          kubectl apply --dry-run=client -f ${{ env.KUBERNETES_CONFIG_DIR }}/
          echo "Kubernetes manifests validation successful"

      - name: Deploy to Kubernetes
        run: |
          echo "Applying Kubernetes configurations..."
          kubectl apply -f ${{ env.KUBERNETES_CONFIG_DIR }}/
          
          echo "Restarting deployments..."
          kubectl rollout restart deployment/frontend-deployment
          kubectl rollout restart deployment/backend-deployment

      - name: Wait for Deployments
        timeout-minutes: 5
        run: |
          echo "Waiting for frontend deployment..."
          kubectl rollout status deployment/frontend-deployment --timeout=300s
          
          echo "Waiting for backend deployment..."
          kubectl rollout status deployment/backend-deployment --timeout=300s

      - name: Verify Deployments
        run: |
          echo "Current deployment status:"
          kubectl get deployments -o wide
          
          echo "Current pod status:"
          kubectl get pods -o wide

      - name: Verify Service Accessibility
        run: |
          echo "Current service status:"
          kubectl get services -o wide
          
          echo "Checking endpoints..."
          kubectl get endpoints
          
          echo "Checking ingress status..."
          kubectl get ingress
