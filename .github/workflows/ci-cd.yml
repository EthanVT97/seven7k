name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  setup:
    name: Setup Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install Dependencies
        run: npm install

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

  frontend:
    name: Frontend Build & Test
    needs: setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Restore Cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Type Check
        run: npm run type-check

      - name: Run Tests
        run: npm test
        env:
          CI: true
          NODE_ENV: test

      - name: Build
        run: npm run build
        env:
          CI: true
          NODE_ENV: production

      - name: Cache Build
        uses: actions/cache@v3
        with:
          path: dist
          key: ${{ runner.os }}-frontend-build-${{ github.sha }}

  backend:
    name: Backend Build & Test
    needs: setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Restore Cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        run: |
          npm install
          npm install typescript@5.3.2
          npm install -D ts-node@10.9.1
          npm install -D @types/node@20.10.3

      - name: Type Check
        run: npm run type-check

      - name: Run Tests
        run: npm test
        env:
          CI: true
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret
          MONGODB_URI: mongodb://localhost:27017/test-db

      - name: Build
        run: npm run build
        env:
          CI: true
          NODE_ENV: production

      - name: Cache Build
        uses: actions/cache@v3
        with:
          path: dist
          key: ${{ runner.os }}-backend-build-${{ github.sha }}

  deploy:
    name: Deploy to Production
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    env:
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      DIGITALOCEAN_CLUSTER_NAME: ${{ secrets.DIGITALOCEAN_CLUSTER_NAME }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore Frontend Build
        uses: actions/cache@v3
        with:
          path: frontend/dist
          key: ${{ runner.os }}-frontend-build-${{ github.sha }}

      - name: Restore Backend Build
        uses: actions/cache@v3
        with:
          path: backend/dist
          key: ${{ runner.os }}-backend-build-${{ github.sha }}

      - name: Set Up doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ env.DIGITALOCEAN_TOKEN }}

      - name: Save Kubernetes Config
        run: doctl kubernetes cluster kubeconfig save "${{ env.DIGITALOCEAN_CLUSTER_NAME }}"

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/
          kubectl rollout restart deployment/frontend-deployment
          kubectl rollout restart deployment/backend-deployment

      - name: Wait for Deployments
        timeout-minutes: 5
        run: |
          kubectl rollout status deployment/frontend-deployment --timeout=300s
          kubectl rollout status deployment/backend-deployment --timeout=300s

      - name: Verify Deployments
        run: |
          kubectl get deployments -o wide
          kubectl get pods -o wide
          kubectl get services -o wide
