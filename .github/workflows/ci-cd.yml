name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  FRONTEND_DIR: 'frontend'
  BACKEND_DIR: 'backend'
  DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  DIGITALOCEAN_CLUSTER_NAME: ${{ secrets.DIGITALOCEAN_CLUSTER_NAME }}
  KUBERNETES_CONFIG_DIR: 'k8s'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            ${{ env.FRONTEND_DIR }}/package-lock.json
            ${{ env.BACKEND_DIR }}/package-lock.json

      - name: Install Frontend Dependencies
        run: |
          cd ${{ env.FRONTEND_DIR }}
          npm install
      
      - name: Install Backend Dependencies
        run: |
          cd ${{ env.BACKEND_DIR }}
          npm ci

      - name: Run Frontend Tests
        run: |
          cd ${{ env.FRONTEND_DIR }}
          npm test
      
      - name: Run Backend Tests
        run: |
          cd ${{ env.BACKEND_DIR }}
          npm test

      - name: Build Frontend
        run: |
          cd ${{ env.FRONTEND_DIR }}
          npm run build
      
      - name: Build Backend
        run: |
          cd ${{ env.BACKEND_DIR }}
          npm run build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up doctl for DigitalOcean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ env.DIGITALOCEAN_TOKEN }}
      
      - name: Save Kubernetes Config
        run: doctl kubernetes cluster kubeconfig save "${{ env.DIGITALOCEAN_CLUSTER_NAME }}"

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f ${{ env.KUBERNETES_CONFIG_DIR }}/
          kubectl rollout restart deployment/frontend-deployment
          kubectl rollout restart deployment/backend-deployment
